"""Automated chart generation for data frames."""

import IPython


_DATAFRAME_REGISTRY = None


def find_charts(
    df,
    max_chart_instances=None,
):
  """Finds charts compatible with dtypes of the given data frame.

  Args:
    df: (pd.DataFrame) A dataframe.
    max_chart_instances: (int) For a single chart type, the max number instances
      to generate.

  Returns:
    (iterable<ChartSection>) A sequence of chart sections.
  """
  # Lazy import to avoid loading altair and transitive deps on kernel init.
  from google.colab import _quickchart_helpers  # pylint: disable=g-import-not-at-top

  def _ensure_dataframe_registry():
    global _DATAFRAME_REGISTRY
    if _DATAFRAME_REGISTRY is None:
      if IPython.get_ipython():
        variable_namespace = IPython.get_ipython().user_ns
      else:  # Fallback to placeholder namespace in testing environment.
        variable_namespace = {}
      _DATAFRAME_REGISTRY = _quickchart_helpers.DataframeRegistry(
          variable_namespace
      )

  _ensure_dataframe_registry()

  chart_sections = determine_charts(
      df, _DATAFRAME_REGISTRY, max_chart_instances
  )
  if not chart_sections:
    print('No charts were generated by quickchart')
  return chart_sections


def find_charts_json(df_name: str, max_chart_instances=None):
  """Equivalent to find_charts, but emits to JSON for use from browser."""

  class FixedDataframeRegistry:

    def get_or_register_varname(self, _) -> str:
      """Returns the name of the fixed dataframe name."""
      return df_name

  dataframe = IPython.get_ipython().user_ns[df_name]

  chart_sections = determine_charts(
      dataframe, FixedDataframeRegistry(), max_chart_instances
  )
  return IPython.display.JSON([s.to_json() for s in chart_sections])


def determine_charts(df, dataframe_registry, max_chart_instances=None):
  """Finds charts compatible with dtypes of the given data frame."""
  # Lazy import to avoid loading matplotlib and transitive deps on kernel init.
  from google.colab import _quickchart_dtypes  # pylint: disable=g-import-not-at-top
  from google.colab import _quickchart_helpers  # pylint: disable=g-import-not-at-top
  from google.colab import _quickchart_rank  # pylint: disable=g-import-not-at-top

  dtype_groups = _quickchart_dtypes.classify_dtypes(df)
  numeric_cols = dtype_groups['numeric']
  categorical_cols = dtype_groups['categorical']
  time_cols = dtype_groups['datetime'] + dtype_groups['timelike']
  chart_sections = []

  if numeric_cols:
    section = _quickchart_helpers.histograms_section(
        df,
        _quickchart_rank.rank_histograms(df, numeric_cols)[
            :max_chart_instances
        ],
        dataframe_registry,
    )
    if section.charts:
      chart_sections.append(section)

  if categorical_cols:
    section = _quickchart_helpers.categorical_histograms_section(
        df,
        _quickchart_rank.rank_histograms(df, categorical_cols)[
            :max_chart_instances
        ],
        dataframe_registry,
    )
    if section.charts:
      chart_sections.append(section)

  if len(numeric_cols) >= 2:
    section = _quickchart_helpers.scatter_section(
        df,
        _quickchart_rank.rank_scatter(df, numeric_cols)[:max_chart_instances],
        dataframe_registry,
    )
    if section.charts:
      chart_sections.append(section)

  if time_cols:
    section = _quickchart_helpers.time_series_line_plots_section(
        df,
        _quickchart_rank.rank_time_series_plots(
            df,
            time_colnames=time_cols,
            numeric_colnames=numeric_cols,
            categorical_colnames=categorical_cols,
        )[:max_chart_instances],
        dataframe_registry,
    )
    if section.charts:
      chart_sections.append(section)

  if numeric_cols:
    section = _quickchart_helpers.value_plots_section(
        df,
        _quickchart_rank.rank_value_plots(df, numeric_cols)[
            :max_chart_instances
        ],
        dataframe_registry,
    )
    if section.charts:
      chart_sections.append(section)

  if len(categorical_cols) >= 2:
    section = _quickchart_helpers.heatmaps_section(
        df,
        _quickchart_rank.rank_heatmaps(df, categorical_cols)[
            :max_chart_instances
        ],
        dataframe_registry,
    )
    if section.charts:
      chart_sections.append(section)

  if categorical_cols and numeric_cols:
    section = _quickchart_helpers.faceted_distributions_section(
        df,
        _quickchart_rank.rank_faceted_distributions(
            df, value_colnames=numeric_cols, facet_colnames=categorical_cols
        )[:max_chart_instances],
        dataframe_registry,
    )
    if section.charts:
      chart_sections.append(section)

  return chart_sections
